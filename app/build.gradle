apply plugin: 'maven-publish' // Apply this plugin at the top of your library build.gradle
apply plugin: 'com.android.application'

// https://developer.android.com/studio/build/gradle-tips#configure-project-wide-properties
// Use the following syntax to access properties you define at the project level:
// rootProject.ext.property_name
android {
    //compileSdkVersion 31
    //buildToolsVersion "31.0.0"
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "net.mikespub.mywebview"
        //minSdkVersion 23
        //targetSdkVersion 30
        //versionCode 21
        //versionName '1.20'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // https://stackoverflow.com/questions/9206117/how-to-workaround-autoomitting-fiiles-folders-starting-with-underscore-in
        // https://github.com/ionic-team/capacitor/issues/1750
        //aaptOptions {
        //    //ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
        //    ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
        //}
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // Configure only for each module that uses Java 8
    // language features (either in its source code or
    // through dependencies).
    compileOptions {
        // sourceCompatibility JavaVersion.VERSION_1_8
        // targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    namespace 'net.mikespub.mywebview'
    // For Kotlin projects
    /*
    kotlinOptions {
        // jvmTarget = "1.8"
        jvmTarget = "11"
    }
     */
    /*
    packagingOptions {
        exclude 'classes.dex'
    }
     */
}

dependencies {
    //def appCompatVersion = "1.5.1"
    def lifeCycleVersion = '2.5.1'
    //def arch_version = '2.1.0'

    // https://developer.android.com/studio/projects/android-library
    implementation project(":myutils")

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // https://developer.android.com/jetpack/androidx/releases/appcompat
    implementation "androidx.appcompat:appcompat:${appCompatVersion}"
    // For loading and tinting drawables on older versions of the platform
    // implementation "androidx.appcompat:appcompat-resources:${appCompatVersion}"
    // https://developer.android.com/jetpack/androidx/releases/constraintlayout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    // To use constraintlayout in compose
    //implementation "androidx.constraintlayout:constraintlayout-compose:1.0.0"
    implementation "androidx.webkit:webkit:1.5.0"
    // https://developer.android.com/jetpack/androidx/releases/lifecycle
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:${lifeCycleVersion}"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:${lifeCycleVersion}"
    // Lifecycles only (without ViewModel or LiveData)
    //implementation "androidx.lifecycle:lifecycle-runtime:${lifeCycleVersion}"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:${lifeCycleVersion}"
    // Annotation processor
    //annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifeCycleVersion"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:${lifeCycleVersion}"
    // optional - helpers for implementing LifecycleOwner in a Service
    //implementation "androidx.lifecycle:lifecycle-service:${lifeCycleVersion}"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    //implementation "androidx.lifecycle:lifecycle-process:${lifeCycleVersion}"
    // optional - ReactiveStreams support for LiveData
    //implementation "androidx.lifecycle:lifecycle-reactivestreams:${lifeCycleVersion}"
    // optional - Test helpers for LiveData
    //testImplementation "androidx.arch.core:core-testing:$arch_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    implementation 'androidx.documentfile:documentfile:1.0.1'
}

// based on https://gist.github.com/delor/f70560f14674b322dcd2
// adapted https://stackoverflow.com/questions/26874498/publish-an-android-library-to-maven-with-aar-and-source-jar
/*
task createPom {
    //apply plugin: 'maven'
    description "Generates pom.xml"
    pom {
        project {
            groupId 'net.mikespub'
            artifactId 'mywebview'
            version versionName
            //packaging 'aar'
        }
    }.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')

        configurations.implementation.allDependencies.each { dependency ->
            if (dependency.group != null && dependency.name != null) {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                if (dependency.group == project.group) {
                    dependencyNode.appendNode('groupId', 'net.mikespub')
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', versionName)
                } else {
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                }
            }
        }
    }.writeTo("$rootDir/pom.xml")
}
 */

publishing {
    publications {
        release(MavenPublication) {
            // Configure the publication here
            groupId 'net.mikespub'
            artifactId 'mywebview'
            //artifactId getArtificatId()
            //version getVersionName()
            version rootProject.ext.versionName
            pom {
                packaging ''
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.each { dependency ->
                    if (dependency.group != null && dependency.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (dependency.group == project.group) {
                            dependencyNode.appendNode('groupId', 'net.mikespub')
                            dependencyNode.appendNode('artifactId', dependency.name)
                            dependencyNode.appendNode('version', versionName)
                        } else {
                            dependencyNode.appendNode('groupId', dependency.group)
                            dependencyNode.appendNode('artifactId', dependency.name)
                            dependencyNode.appendNode('version', dependency.version)
                        }
                    }
                }
            }
            //pom.writeTo("$rootDir/pom.xml")
        }
    }
    // http://sorcersoft.org/project/site/gradle/userguide/publishing_maven.html
    model {
        tasks.generatePomFileForReleasePublication {
            destination = file("$rootDir/pom.xml")
        }
    }
}